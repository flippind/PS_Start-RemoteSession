<#
    [PARAMS]
    [string]$redirectDrive
    [string]$sessionName = 'viaStart-RemoteSession'
#>


BEGIN {
    CLASS Drive {
        [string]$name
        hidden [string]$PSDriveName # This should be generated by the constructor as $name[0]
        [string]$driveType
        [string]$label
        [string]$netPath

        [void]setPSDriveName() { 
            $this.PSDriveName = $this.name[0] 
        }

        [void]setNetPath() {
            if ($this.driveType -eq 'fixed') {
                $machineFQDN = [System.Net.DNS]::GetHostByName($ENV:COMPUTERNAME).hostname
                $this.netPath = "\\$machineFQDN\$($this.PSDriveName)$"
            }
            else {
                $message = '$netPath must be supplied if drive type is not "fixed"'
                $exception = New-Object InvalidOperationException $message
                $errorID = 'InvalidNetPath'
                $errorCategory = [Management.Automation.ErrorCategory]::InvalidOperation
                $target = $this
                $errorRecord = New-Object Management.Automation.ErrorRecord $exception, $errorID, $errorCategory, $target
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            }
        }

        [void]setNetPath([string]$netPath) {
            if ($netPath) { $this.netPath = $netPath }
            else { $this.setNetPath() }
        }
    }

    #region Get currently mapped letters and paths
    $currentDrives = @()
    $drivesDotNet = [System.IO.DriveInfo]::GetDrives() | Where-object {$_.DriveType -in ('Network','Fixed')}
    ForEach ($drive in $drivesDotNet) {
        $driveConstruct = @{
            'name' = $drive.name
            'driveType' = $drive.DriveType
            'label' = $drive.VolumeLabel
        }

        # Hope there's eventually a better way to do this which doesn't involve having to define class constructors
        # https://github.com/PowerShell/PowerShell/issues/16328
        $thisDrive = New-Object Drive -Property $driveConstruct
        $thisDrive.setPSDriveName()
        $thisDrive.setNetPath((Get-PSDrive -Name $thisDrive.PSDriveName).DisplayRoot)
        $currentDrives += $thisDrive
    }
    #endregion Get currently mapped letters and paths

    #region Discover existing PSSessions
    [array]$existingSessions = Get-PSSession | Where-Object {$_.state -eq 'Opened'}
    if (-not $existingSessions) {
        $message = 'There are no open PSSessions to redirect the drive into'
        $exception = New-Object InvalidOperationException $message
        $errorID = 'NullSessions'
        $errorCategory = [Management.Automation.ErrorCategory]::InvalidOperation
        $target = 'PSSession'
        $errorRecord = New-Object Management.Automation.ErrorRecord $exception, $errorID, $errorCategory, $target
        #$PSCmdlet.ThrowTerminatingError($errorRecord)
        Throw $errorRecord
    }
    #endregion Discover existing PSSessions

}

PROCESS {
    # Prompt for current session drive letter
    if ($redirectDriveName -notin $currentDrives.name) {
        # Validation in preparation for parameterization
        [validatescript({
            if ($_ -match "[a-zA-Z]:\\?") { return $true }
            else { Throw "Invalid drive letter.  RedirectDrive must resemble 'C:'. "}
        })]$redirectDrive = Read-Host "Enter drive letter to be mapped to remote session"
        $redirectDriveName = $redirectDrive.replace('\','') + '\'
    }   
    $targetDrive = $currentDrives | Where-Object {$_.name -eq $redirectDriveName}
    
    # Prompt or assume session name
    $sessionName = 'viaStart-RemoteSession'                # Test variable assignment for assumed parameter default
    if ($sessionName -and $sessionName -notIn $existingSessions.name) {
        $sessionName = Read-host "Please enter the PSSession name to redirect the drive in"
    }
    $targetSession = $existingSessions | Where-Object {$_.name -eq $sessionName}

    # Invoke New-PSDrive to connect drive letter and UNC path
}

END {
    #$currentDrives | Format-Table
    #$redirectDriveName
    #$targetDrive
    $existingSessions
    $targetSession
}
