
BEGIN {
    CLASS Drive {
        [string]$name
        hidden [string]$PSDriveName # This should be generated by the constructor as $name[0]
        [string]$driveType
        [string]$label
        [string]$netPath

        [void]setPSDriveName() { 
            $this.PSDriveName = $this.name[0] 
        }

        [void]setNetPath() {
            if ($this.driveType -eq 'fixed') {
                $machineFQDN = [System.Net.DNS]::GetHostByName($ENV:COMPUTERNAME).hostname
                $this.netPath = "\\$machineFQDN\$($this.PSDriveName)$"
            }
            else {
                $message = '$netPath must be supplied if drive type is not "fixed"'
                $exception = New-Object InvalidOperationException $message
                $errorID = 'InvalidNetPath'
                $errorCategory = [Management.Automation.ErrorCategory]::InvalidOperation
                $target = $this
                $errorRecord = New-Object Management.Automation.ErrorRecord $exception, $errorID, $errorCategory, $target
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            }
        }

        [void]setNetPath([string]$netPath) {
            if ($netPath) { $this.netPath = $netPath }
            else { $this.setNetPath() }
        }
    }

    $currentDrives = @()
}

PROCESS {
    #region Get current session letters and paths
    $drivesDotNet = [System.IO.DriveInfo]::GetDrives() | Where-object {$_.DriveType -in ('Network','Fixed')}
    ForEach ($drive in $drivesDotNet) {
        $driveConstruct = @{
            'name' = $drive.name
            'driveType' = $drive.DriveType
            'label' = $drive.VolumeLabel
        }

        # Hope there's eventually a better way to do this which doesn't involve having to define class constructors
        # https://github.com/PowerShell/PowerShell/issues/16328
        $thisDrive = New-Object Drive -Property $driveConstruct
        $thisDrive.setPSDriveName()
        $thisDrive.setNetPath((Get-PSDrive -Name $thisDrive.PSDriveName).DisplayRoot)
        $currentDrives += $thisDrive
    }
    #endregion Get current session letters and paths

    
    # Prompt for current session drive letter
    
    # Prompt or assume session name
    
    # Invoke New-PSDrive to connect drive letter and UNC path
}

END {
    $currentDrives | Format-Table
}
